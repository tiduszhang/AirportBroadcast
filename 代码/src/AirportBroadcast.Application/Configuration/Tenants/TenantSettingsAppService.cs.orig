using System;
using System.Globalization;
using System.Threading.Tasks;
using Abp.Authorization;
using Abp.Configuration;
using Abp.Configuration.Startup;
using Abp.Extensions;
using Abp.Json;
using Abp.Net.Mail;
using Abp.Runtime.Session;
using Abp.Timing;
using Abp.Zero.Configuration;
using Abp.Zero.Ldap.Configuration;
using AirportBroadcast.Authorization;
using AirportBroadcast.Configuration.Host.Dto;
using AirportBroadcast.Configuration.Tenants.Dto;
using AirportBroadcast.Domains.Sales;
using AirportBroadcast.Security;
using AirportBroadcast.Storage;
using AirportBroadcast.Timing;
using Newtonsoft.Json;
using static AirportBroadcast.Configuration.AppSettings;

namespace AirportBroadcast.Configuration.Tenants
{
    [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings, AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
    public class TenantSettingsAppService : AbpZeroTemplateAppServiceBase, ITenantSettingsAppService
    {
        private readonly IMultiTenancyConfig _multiTenancyConfig;
        private readonly IAbpZeroLdapModuleConfig _ldapModuleConfig;
        private readonly ITimeZoneService _timeZoneService;
        private readonly IBinaryObjectManager _binaryObjectManager;
        private readonly IOrderRepository _orderRepository;

        public TenantSettingsAppService(
            IMultiTenancyConfig multiTenancyConfig,
            IAbpZeroLdapModuleConfig ldapModuleConfig,
            ITimeZoneService timeZoneService,
            IBinaryObjectManager binaryObjectManager, IOrderRepository orderRepository)
        {
            _multiTenancyConfig = multiTenancyConfig;
            _ldapModuleConfig = ldapModuleConfig;
            _timeZoneService = timeZoneService;
            _binaryObjectManager = binaryObjectManager;
            _orderRepository = orderRepository;
        }

        #region Get Settings

        public async Task<TenantSettingsEditDto> GetAllSettings()
        {
            var settings = new TenantSettingsEditDto
            {
                UserManagement = await GetUserManagementSettingsAsync(),
                Security = await GetSecuritySettingsAsync()
            };

            if (!_multiTenancyConfig.IsEnabled || Clock.SupportsMultipleTimezone)
            {
                settings.General = await GetGeneralSettingsAsync();
            }

            settings.General.OrderId = _orderRepository.GetTableIdent();

            settings.General.SellTkApiUrl = await SettingManager.GetSettingValueForTenantAsync(AppSettings.TenantManagement.SellTkApiUrl, AbpSession.GetTenantId());


            if (!_multiTenancyConfig.IsEnabled)
            {
                settings.Email = await GetEmailSettingsAsync();

                if (_ldapModuleConfig.IsEnabled)
                {
                    settings.Ldap = await GetLdapSettingsAsync();
                }
                else
                {
                    settings.Ldap = new LdapSettingsEditDto { IsModuleEnabled = false };
                }
            }

            return settings;
        }

        private async Task<LdapSettingsEditDto> GetLdapSettingsAsync()
        {
            return new LdapSettingsEditDto
            {
                IsModuleEnabled = true,
                IsEnabled = await SettingManager.GetSettingValueAsync<bool>(LdapSettingNames.IsEnabled),
                Domain = await SettingManager.GetSettingValueAsync(LdapSettingNames.Domain),
                UserName = await SettingManager.GetSettingValueAsync(LdapSettingNames.UserName),
                Password = await SettingManager.GetSettingValueAsync(LdapSettingNames.Password),
            };
        }

        private async Task<EmailSettingsEditDto> GetEmailSettingsAsync()
        {
            return new EmailSettingsEditDto
            {
                DefaultFromAddress = await SettingManager.GetSettingValueAsync(EmailSettingNames.DefaultFromAddress),
                DefaultFromDisplayName = await SettingManager.GetSettingValueAsync(EmailSettingNames.DefaultFromDisplayName),
                SmtpHost = await SettingManager.GetSettingValueAsync(EmailSettingNames.Smtp.Host),
                SmtpPort = await SettingManager.GetSettingValueAsync<int>(EmailSettingNames.Smtp.Port),
                SmtpUserName = await SettingManager.GetSettingValueAsync(EmailSettingNames.Smtp.UserName),
                SmtpPassword = await SettingManager.GetSettingValueAsync(EmailSettingNames.Smtp.Password),
                SmtpDomain = await SettingManager.GetSettingValueAsync(EmailSettingNames.Smtp.Domain),
                SmtpEnableSsl = await SettingManager.GetSettingValueAsync<bool>(EmailSettingNames.Smtp.EnableSsl),
                SmtpUseDefaultCredentials = await SettingManager.GetSettingValueAsync<bool>(EmailSettingNames.Smtp.UseDefaultCredentials)
            };
        }

        private async Task<GeneralSettingsEditDto> GetGeneralSettingsAsync()
        {
            var settings = new GeneralSettingsEditDto();

            if (Clock.SupportsMultipleTimezone)
            {
                var timezone = await SettingManager.GetSettingValueForTenantAsync(TimingSettingNames.TimeZone, AbpSession.GetTenantId());

                settings.Timezone = timezone;
                settings.TimezoneForComparison = timezone;
            }

            var defaultTimeZoneId = await _timeZoneService.GetDefaultTimezoneAsync(SettingScopes.Tenant, AbpSession.TenantId);

            if (settings.Timezone == defaultTimeZoneId)
            {
                settings.Timezone = string.Empty;
            }

            return settings;
        }

        private async Task<TenantUserManagementSettingsEditDto> GetUserManagementSettingsAsync()
        {
            return new TenantUserManagementSettingsEditDto
            {
                AllowSelfRegistration = await SettingManager.GetSettingValueAsync<bool>(AppSettings.UserManagement.AllowSelfRegistration),
                IsNewRegisteredUserActiveByDefault = await SettingManager.GetSettingValueAsync<bool>(AppSettings.UserManagement.IsNewRegisteredUserActiveByDefault),
                IsEmailConfirmationRequiredForLogin = await SettingManager.GetSettingValueAsync<bool>(AbpZeroSettingNames.UserManagement.IsEmailConfirmationRequiredForLogin),
                UseCaptchaOnRegistration = await SettingManager.GetSettingValueAsync<bool>(AppSettings.UserManagement.UseCaptchaOnRegistration)
            };
        }

        private async Task<SecuritySettingsEditDto> GetSecuritySettingsAsync()
        {
            var passwordComplexitySetting = await SettingManager.GetSettingValueAsync(AppSettings.Security.PasswordComplexity);
            var defaultPasswordComplexitySetting = await SettingManager.GetSettingValueForApplicationAsync(AppSettings.Security.PasswordComplexity);

            var settings = new SecuritySettingsEditDto
            {
                UseDefaultPasswordComplexitySettings = passwordComplexitySetting == defaultPasswordComplexitySetting,
                PasswordComplexity = JsonConvert.DeserializeObject<PasswordComplexitySetting>(passwordComplexitySetting),
                DefaultPasswordComplexity = JsonConvert.DeserializeObject<PasswordComplexitySetting>(defaultPasswordComplexitySetting),
                UserLockOut = await GetUserLockOutSettingsAsync()
            };

            settings.TwoFactorLogin = await GetTwoFactorLoginSettingsAsync();

            return settings;
        }

        private async Task<UserLockOutSettingsEditDto> GetUserLockOutSettingsAsync()
        {
            return new UserLockOutSettingsEditDto
            {
                IsEnabled = await SettingManager.GetSettingValueAsync<bool>(AbpZeroSettingNames.UserManagement.UserLockOut.IsEnabled),
                MaxFailedAccessAttemptsBeforeLockout = await SettingManager.GetSettingValueAsync<int>(AbpZeroSettingNames.UserManagement.UserLockOut.MaxFailedAccessAttemptsBeforeLockout),
                DefaultAccountLockoutSeconds = await SettingManager.GetSettingValueAsync<int>(AbpZeroSettingNames.UserManagement.UserLockOut.DefaultAccountLockoutSeconds)
            };
        }

        private Task<bool> IsTwoFactorLoginEnabledForApplicationAsync()
        {
            return SettingManager.GetSettingValueForApplicationAsync<bool>(AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsEnabled);
        }

        private async Task<TwoFactorLoginSettingsEditDto> GetTwoFactorLoginSettingsAsync()
        {
            var settings = new TwoFactorLoginSettingsEditDto
            {
                IsEnabledForApplication = await IsTwoFactorLoginEnabledForApplicationAsync()
            };

            if (_multiTenancyConfig.IsEnabled && !settings.IsEnabledForApplication)
            {
                return settings;
            }

            settings.IsEnabled = await SettingManager.GetSettingValueAsync<bool>(AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsEnabled);
            settings.IsRememberBrowserEnabled = await SettingManager.GetSettingValueAsync<bool>(AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsRememberBrowserEnabled);

            if (!_multiTenancyConfig.IsEnabled)
            {
                settings.IsEmailProviderEnabled = await SettingManager.GetSettingValueAsync<bool>(AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsEmailProviderEnabled);
                settings.IsSmsProviderEnabled = await SettingManager.GetSettingValueAsync<bool>(AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsSmsProviderEnabled);
            }

            return settings;
        }

        #endregion

        #region Update Settings

        public async Task UpdateAllSettings(TenantSettingsEditDto input)
        {
            await UpdateUserManagementSettingsAsync(input.UserManagement);
            await UpdateSecuritySettingsAsync(input.Security);

            //Time Zone
            if (Clock.SupportsMultipleTimezone)
            {
                if (input.General.Timezone.IsNullOrEmpty())
                {
                    var defaultValue = await _timeZoneService.GetDefaultTimezoneAsync(SettingScopes.Tenant, AbpSession.TenantId);
                    await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), TimingSettingNames.TimeZone, defaultValue);
                }
                else
                {
                    await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), TimingSettingNames.TimeZone, input.General.Timezone);
                }
            }

            if (!_multiTenancyConfig.IsEnabled)
            {
                input.ValidateHostSettings();

                await UpdateEmailSettingsAsync(input.Email);

                if (_ldapModuleConfig.IsEnabled)
                {
                    await UpdateLdapSettingsAsync(input.Ldap);
                }
            }

            //order ident
            if (input.General.OrderId.HasValue)
            {
                var lastOrderId = _orderRepository.GetTableIdent();
                if (lastOrderId.HasValue)
                {
                    if (input.General.OrderId.Value > lastOrderId.Value)
                    {
                        try
                        {
                            _orderRepository.SetTableIdent(input.General.OrderId.Value);
                        }
                        catch (Exception exc)
                        {
                            Logger.Error(exc.Message);
                            //忽略异常
                        }
                    }
                }
            }

            if (!input.General.SellTkApiUrl.IsNullOrEmpty())
            {
                await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AppSettings.TenantManagement.SellTkApiUrl, input.General.SellTkApiUrl);
            }
        }

        private async Task UpdateLdapSettingsAsync(LdapSettingsEditDto input)
        {
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), LdapSettingNames.IsEnabled, input.IsEnabled.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture));
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), LdapSettingNames.Domain, input.Domain.IsNullOrWhiteSpace() ? null : input.Domain);
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), LdapSettingNames.UserName, input.UserName.IsNullOrWhiteSpace() ? null : input.UserName);
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), LdapSettingNames.Password, input.Password.IsNullOrWhiteSpace() ? null : input.Password);
        }

        private async Task UpdateEmailSettingsAsync(EmailSettingsEditDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.DefaultFromAddress, input.DefaultFromAddress);
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.DefaultFromDisplayName, input.DefaultFromDisplayName);
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.Host, input.SmtpHost);
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.Port, input.SmtpPort.ToString(CultureInfo.InvariantCulture));
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.UserName, input.SmtpUserName);
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.Password, input.SmtpPassword);
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.Domain, input.SmtpDomain);
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.EnableSsl, input.SmtpEnableSsl.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture));
            await SettingManager.ChangeSettingForApplicationAsync(EmailSettingNames.Smtp.UseDefaultCredentials, input.SmtpUseDefaultCredentials.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture));
        }

        private async Task UpdateUserManagementSettingsAsync(TenantUserManagementSettingsEditDto settings)
        {
            await SettingManager.ChangeSettingForTenantAsync(
                AbpSession.GetTenantId(),
                AppSettings.UserManagement.AllowSelfRegistration,
                settings.AllowSelfRegistration.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture)
            );
            await SettingManager.ChangeSettingForTenantAsync(
                AbpSession.GetTenantId(),
                AppSettings.UserManagement.IsNewRegisteredUserActiveByDefault,
                settings.IsNewRegisteredUserActiveByDefault.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture)
            );

            await SettingManager.ChangeSettingForTenantAsync(
                AbpSession.GetTenantId(),
                AbpZeroSettingNames.UserManagement.IsEmailConfirmationRequiredForLogin,
                settings.IsEmailConfirmationRequiredForLogin.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture)
            );
            await SettingManager.ChangeSettingForTenantAsync(
                AbpSession.GetTenantId(),
                AppSettings.UserManagement.UseCaptchaOnRegistration,
                settings.UseCaptchaOnRegistration.ToString(CultureInfo.InvariantCulture).ToLower(CultureInfo.InvariantCulture)
            );
        }

        private async Task UpdateSecuritySettingsAsync(SecuritySettingsEditDto settings)
        {
            if (settings.UseDefaultPasswordComplexitySettings)
            {
                await SettingManager.ChangeSettingForTenantAsync(
                    AbpSession.GetTenantId(),
                    AppSettings.Security.PasswordComplexity,
                    settings.DefaultPasswordComplexity.ToJsonString()
                );
            }
            else
            {
                await SettingManager.ChangeSettingForTenantAsync(
                    AbpSession.GetTenantId(),
                    AppSettings.Security.PasswordComplexity,
                    settings.PasswordComplexity.ToJsonString()
                );
            }

            await UpdateUserLockOutSettingsAsync(settings.UserLockOut);
            await UpdateTwoFactorLoginSettingsAsync(settings.TwoFactorLogin);
        }

        private async Task UpdateUserLockOutSettingsAsync(UserLockOutSettingsEditDto settings)
        {
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.UserLockOut.IsEnabled, settings.IsEnabled.ToString(CultureInfo.InvariantCulture).ToLower());
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.UserLockOut.DefaultAccountLockoutSeconds, settings.DefaultAccountLockoutSeconds.ToString());
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.UserLockOut.MaxFailedAccessAttemptsBeforeLockout, settings.MaxFailedAccessAttemptsBeforeLockout.ToString());
        }

        private async Task UpdateTwoFactorLoginSettingsAsync(TwoFactorLoginSettingsEditDto settings)
        {
            if (_multiTenancyConfig.IsEnabled &&
                !await IsTwoFactorLoginEnabledForApplicationAsync()) //Two factor login can not be used by tenants if disabled by the host
            {
                return;
            }

            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsEnabled, settings.IsEnabled.ToString(CultureInfo.InvariantCulture).ToLower());
            await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsRememberBrowserEnabled, settings.IsRememberBrowserEnabled.ToString(CultureInfo.InvariantCulture).ToLower());

            if (!_multiTenancyConfig.IsEnabled)
            {
                //These settings can only be changed by host, in a multitenant application.
                await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsEmailProviderEnabled, settings.IsEmailProviderEnabled.ToString(CultureInfo.InvariantCulture).ToLower());
                await SettingManager.ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsSmsProviderEnabled, settings.IsSmsProviderEnabled.ToString(CultureInfo.InvariantCulture).ToLower());
            }
        }

        #endregion

        #region Others

        public async Task ClearLogo()
        {
            var tenant = await GetCurrentTenantAsync();

            if (!tenant.HasLogo())
            {
                return;
            }

            var logoObject = await _binaryObjectManager.GetOrNullAsync(tenant.LogoId.Value);
            if (logoObject != null)
            {
                await _binaryObjectManager.DeleteAsync(tenant.LogoId.Value);
            }

            tenant.ClearLogo();
        }

        public async Task ClearCustomCss()
        {
            var tenant = await GetCurrentTenantAsync();

            if (!tenant.CustomCssId.HasValue)
            {
                return;
            }

            var cssObject = await _binaryObjectManager.GetOrNullAsync(tenant.CustomCssId.Value);
            if (cssObject != null)
            {
                await _binaryObjectManager.DeleteAsync(tenant.CustomCssId.Value);
            }

            tenant.CustomCssId = null;
        }


        #endregion

        #region PayMentSetting
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task<PayMentSettingEditDto> GetPayMentSetting()
        {
            return new PayMentSettingEditDto()
            {
                Subject = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.Subject),
                AliPay = new AliPayDto()
                {
                    ServiceUrl = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.AliPay.ServiceUrl),
                    AppId = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.AliPay.AppId),
                    PrivateKeyPem = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.AliPay.PrivateKeyPem),
                    AlipayPulicKey = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.AliPay.AlipayPulicKey)
                },
                WxPay = new WxPayDto()
                {
                    NotifyUrl = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.WxPay.NotifyUrl),
                    AppId = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.WxPay.AppId),
                    MchId = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.WxPay.MchId),
                    Key = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.WxPay.Key),
                    SslcertPath = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.WxPay.SslcertPath),
                },
                CCBPay = new CCBPayDto()
                {
<<<<<<< HEAD
                    MERCHANTID = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.MERCHANTID),
                    PASSWORD = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.PASSWORD),
                    POSID = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.POSID),
                    USERID = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.USERID),
                    BRANCHID = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.BRANCHID),
                    CreateUrl = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.CreateUrl),
                    PUB = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.PUB),
                    QueryUrl = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.QueryUrl),
                    QUPWD = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.QUPWD)
=======
                    MERCHANTID= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.MERCHANTID),
                    PASSWORD= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.PASSWORD),
                    POSID= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.POSID),
                    USERID= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.USERID),
                    BRANCHID= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.BRANCHID),
                    CreateUrl= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.CreateUrl),
                    PUB= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.PUB),
                    QueryUrl= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.QueryUrl),
                    QUPWD= await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.QUPWD),
                    SocketIp = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.SocketIp),
                    SocketPort = await SettingManager.GetSettingValueAsync(AppSettings.PayMethod.CCBPay.SocketPort),
>>>>>>> 65258bda65db9eedd2e7c8cbd128c0b248217efa
                }

            };
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task UpdateAliPayMent(AliPayDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.AliPay.ServiceUrl, input.ServiceUrl);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.AliPay.AppId, input.AppId);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.AliPay.PrivateKeyPem, input.PrivateKeyPem);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.AliPay.AlipayPulicKey, input.AlipayPulicKey);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task UpdateWxPayMent(WxPayDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.WxPay.NotifyUrl, input.NotifyUrl);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.WxPay.AppId, input.AppId);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.WxPay.MchId, input.MchId);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.WxPay.Key, input.Key);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.WxPay.SslcertPath, input.SslcertPath);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task UpdateCCBPayMent(CCBPayDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.QUPWD, input.QUPWD);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.MERCHANTID, input.MERCHANTID);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.PASSWORD, input.PASSWORD);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.POSID, input.POSID);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.PUB, input.PUB);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.QueryUrl, input.QueryUrl);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.USERID, input.USERID);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.BRANCHID, input.BRANCHID);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.CreateUrl, input.CreateUrl);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.SocketIp, input.SocketIp);
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.CCBPay.SocketPort, input.SocketPort);
        }

        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task UpdateTp(PayMentSettingEditDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(AppSettings.PayMethod.Subject, input.Subject);
        }
        #endregion

        #region 保险设置

        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task<BaoXianSettingsEditDto> GetBaoXianSettings()
        {
            return new BaoXianSettingsEditDto()
            {
                Url = await SettingManager.GetSettingValueAsync(BaoXianConsts.Url),
                Pid = await SettingManager.GetSettingValueAsync(BaoXianConsts.Pid),
                Key = await SettingManager.GetSettingValueAsync(BaoXianConsts.Key),
            };
        }

        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PayMents)]
        public async Task UpdateBaoXianSettings(BaoXianSettingsEditDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(BaoXianConsts.Url, input.Url);
            await SettingManager.ChangeSettingForApplicationAsync(BaoXianConsts.Pid, input.Pid);
            await SettingManager.ChangeSettingForApplicationAsync(BaoXianConsts.Key, input.Key);
        }


        #endregion


        #region 数据推送设置

        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PushData)]
        public async Task<PushDataSettingsEditDto> GetPushDataSettings()
        {
            return new PushDataSettingsEditDto()
            {
                CityId = await SettingManager.GetSettingValueAsync(PushToOnline.CityId),
                OnLineUrl = await SettingManager.GetSettingValueAsync(PushToOnline.OnLineUrl),
                PrivateKey = await SettingManager.GetSettingValueAsync(PushToOnline.PrivateKey),
                StationId = await SettingManager.GetSettingValueAsync(PushToOnline.StationId),
            };
        }

        [AbpAuthorize(AppPermissions.Pages_Administration_Tenant_Settings_PushData)]
        public async Task UpdatePushDataSettings(PushDataSettingsEditDto input)
        {
            await SettingManager.ChangeSettingForApplicationAsync(PushToOnline.CityId, input.CityId);
            await SettingManager.ChangeSettingForApplicationAsync(PushToOnline.OnLineUrl, input.OnLineUrl);
            await SettingManager.ChangeSettingForApplicationAsync(PushToOnline.PrivateKey, input.PrivateKey);
            await SettingManager.ChangeSettingForApplicationAsync(PushToOnline.StationId, input.StationId);
        }


        #endregion

    }
}